{{template "base" .}}
{{define "content"}}
<article class="card-list">
  <ots-alert-message></ots-alert-message>
  <h2 class="card-title">
    Neue Daten einlesen {{ index .FileName }}
  </h2>
  <section class="card-body">
    <form class="form" action="" method="POST" id="uplaod-form">
      <div class="group-controls">
        <label for="plants">Den Betrieb auswählen: </label>
        <select id="plants" name="plants"></select>
        <input id="id_plant" name="id_plant">
      </div>
      <div class="group-controls">
        <label for="file-input" class="file-label" id="file-label">Datei auswählen
          <input class="file-input" type="file" id="file-input" accept=".fhx">
        </label>
        <div id="divout" hidden></div>
      </div>
      <div class="group-controls">
        <button type="button" class="btn" disabled id="btn-upload">Upload</button>
      </div>
    </form>
  </section>
</article>
{{ end }}
{{ define "js"}}

<script>
  'strict on'

  const input = document.getElementById('file-input');
  const label = document.getElementById('file-label');
  const upload = document.getElementById('btn-upload');
  const inputForm = document.getElementById('uplaod-form');
  const idPlant = document.getElementById('id_plant');
  const select = document.getElementById('plants');

  document.addEventListener("DOMContentLoaded", function () {

    const uploadFile = {
      file_string: "",
      plant_id: 0,
    }

    readPlants(select);

    // File Hochladen
    input.addEventListener('change', function () {
      var fr = new FileReader();
      label.innerText = "Upload der Datei: " + this.files[0].name;
      fr.onload = function () {
        let output = fr.result;
        uploadFile.file_string = "ein Text";
        uploadFile.plant_id = +idPlant.value;
        if (output.length > 0) {
          upload.removeAttribute("disabled");
        }
        JSON.stringify(uploadFile);
        console.log(JSON.stringify(uploadFile))
        upload.addEventListener('click', function (event) {
          uploadText(output, uploadFile.plant_id);
        })
      }
      fr.readAsText(this.files[0]);
    })

  })

  // Text auf Server hochladen
  function uploadText(stream, plantID) {
    const requestOptions = {
      method: 'POST',
      headers: {
        'Accept': 'application/text',
        'Content-Type': 'application/text'
      },
      body: stream
    }
    // File in DB speichern
    fetch('{{.API}}/api/read-fhx', requestOptions)
      .then(response => response.json())
      .then(response => {
        let data;
        try {
          console.log(response)
        } catch (err) {
          console.log(err);
        }
      })
  }

  // Einlesen der Anlagen aus der Datenbank
  function readPlants(selectElement) {

    let optionElement;

    const requestOptions = {
      method: 'get',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      },
    };

    optionElement = document.createElement('option');
    optionElement.value = 0;
    optionElement.text = ""
    selectElement.appendChild(optionElement);

    selectElement.addEventListener('change', function (event) {
      const ele = event.target
      console.log(ele)
      idPlant.value = ele.value;
    })

    // Einlesen der Anlagen aus der Datenbank
    fetch('{{.API}}/api/all-plants')
      .then(response => response.json())
      .then(function (data) {
        for (let plant of data) {
          optionElement = document.createElement('option');
          optionElement.value = plant.id;
          optionElement.text = plant.plant_name
          selectElement.appendChild(optionElement)
        }
      })
  }

</script>
{{ end }}